# Form implementation generated from reading ui file '.\MainWindow.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from base64 import b64decode

from kaspersky import *


def get_pic(pic_code, pic_name):
    image = open(pic_name, 'wb')
    image.write(b64decode(pic_code))
    image.close()


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QUrl
from PyQt6.QtGui import QAction, QIcon
from PyQt6.QtQml import QQmlApplicationEngine
from PyQt6.QtWidgets import QPushButton, QWidget, QLabel, QVBoxLayout

import HttpToXXT_uw
from AboutWidget_uw import AboutWidget
from LoginDialog_uw import LoginDialog
from SignInfoDialog_uw import SignInfoDialog
import sys

application_path = (
    sys._MEIPASS
    if getattr(sys, "frozen", False)
    else os.path.dirname(os.path.abspath(__file__))
)


class Ui_MainWindow(object):
    def __init__(self):
        self.xxt = None
        self.sign_info_dialog = None

    def setupUi(self, MainWindow, xxt):
        MainWindow.setObjectName("MainWindow")
        # MainWindow.resize(444, 444)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.listWidget_course = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_course.setObjectName("listWidget_course")
        self.verticalLayout.addWidget(self.listWidget_course)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        # self.menubar.setGeometry(QtCore.QRect(0, 0, 444, 18))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_more = QtWidgets.QMenu(self.menubar)
        self.menu_more.setObjectName("menu_more")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action_autosign = QtGui.QAction(MainWindow)
        self.action_autosign.setObjectName("action_autosign")
        self.action_sign_info = QAction(MainWindow)
        self.action_sign_info.setObjectName("action_sign_info")
        self.action_logout = QAction(MainWindow)
        self.action_logout.setObjectName("action_logout")
        self.action_about = QAction(MainWindow)
        self.action_about.setObjectName("action_about")
        self.menu_more.addAction(self.action_logout)
        self.menu_more.addAction(self.action_about)
        self.menu.addAction(self.action_autosign)
        self.menu.addAction(self.action_sign_info)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_more.menuAction())
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.xxt = xxt
        self.init_course_item()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Uwzz1.0.2+"))
        MainWindow.setStyleSheet('color:green')
        MainWindow.setWindowOpacity(0.9)
        self.menu.setTitle(_translate("MainWindow", "签到"))
        self.menu_more.setTitle(_translate("MainWindow", "更多"))
        self.action_logout.setText(_translate("MainWindow", "登出"))
        self.action_logout.setShortcut(_translate("MainWindow", "Ctrl+Shift+Q"))
        self.action_about.setText(_translate("MainWindow", "关于"))
        self.action_about.setShortcut(_translate("MainWindow", "Ctrl+Shift+U"))
        self.action_autosign.setText(_translate("MainWindow", "自动签到"))
        self.action_autosign.setShortcut(_translate("MainWindow", "Ctrl+Shift+A"))
        self.action_sign_info.setText(_translate('MainWindow', "签到信息"))
        self.action_sign_info.setShortcut(_translate("MainWindow", "Ctrl+Shift+I"))
        # self.xxt = HttpToXXT.HttpToXXT(None, None)
        # self.xxt.get2id()
        # self.init_course_item()
        self.action_autosign.triggered.connect(self.select_autosign)
        self.action_sign_info.triggered.connect(self.set_sign_info)
        self.action_about.triggered.connect(self.show_about)
        self.action_logout.triggered.connect(self.logout)

    def init_course_item(self):
        # item = CourseItem.CourseItem("UWillno", 123, 321)
        # item = CourseItem.CourseItem("UWillno", 123, 321)
        # print(CourseItem.course_list)
        # print(self.xxt.course_list)
        for item in self.xxt.course_list:
            self.listWidget_course.addItem(item)
            self.listWidget_course.setItemWidget(item, item.widget)

    def select_autosign(self):
        for item in self.xxt.course_list:
            item.select_items()
        self.button_autosign = QPushButton("开始签到")
        self.verticalLayout.addWidget(self.button_autosign)
        self.action_autosign.triggered.disconnect(self.select_autosign)
        self.button_autosign.clicked.connect(self.start_autosign)
        self.detail = QPushButton("自动签到日志")
        self.verticalLayout.addWidget(self.detail)
        self.detail.clicked.connect(self.show_sign_detail)

    def set_sign_info(self):
        if self.sign_info_dialog is not None:
            # print("已存在")
            self.sign_info_dialog.show()
        else:
            self.sign_info_dialog = SignInfoDialog(self.xxt)

    # def show_sign_detail(self):
    #     for item in
    #     QMessageBox.information(self, "{}签到详情".format(), self.sign_detail)

    def start_autosign(self):
        for item in self.xxt.course_list:
            item.start_autosign()

    def logout(self):
        os.remove("info.txt")
        sys.exit()

    def show_about(self):
        self.about_widget = AboutWidget()
        self.engine = QQmlApplicationEngine()
        file = os.path.join(application_path, "about.qml")
        self.engine.rootContext().setContextProperty('window', self.about_widget)
        self.engine.load(QUrl.fromLocalFile(file))

    def show_sign_detail(self):
        # QMessageBox.about(self,"asd",data)
        # self.a=QDialog()
        # self.a.show()
        self.detailwin = QWidget()
        self.detailwin.setWindowTitle("自动签到日志")
        lb = QLabel(self.xxt.autosign_detail)
        vbox = QVBoxLayout()
        vbox.addWidget(lb)
        about_label = QLabel("普通签到将不计入！")
        about_label.setStyleSheet("color:red")
        vbox.addWidget(about_label)
        self.detailwin.setLayout(vbox)
        self.detailwin.setStyleSheet('color:green')
        self.detailwin.setWindowOpacity(0.9)
        self.detailwin.show()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    get_pic(kaspersky_ico, 'icon_ico')
    app.setWindowIcon(QIcon('icon_ico'))
    path = "info.txt"
    if os.path.exists("info.txt"):
        with open("info.txt", 'r') as f:
            l = f.readlines()
            uname = l[0].strip("\n")
            pwd = l[1].strip("\n")
            loctext = l[2].strip("\n")
            lon = l[3].strip("\n")
            lat = l[4].strip("\n")
            dir = l[5].strip("\n")
            skip = bool(l[6].strip("\n"))

            xxt = HttpToXXT_uw.HttpToXXT(uname, pwd, loctext, lat, lon, dir, skip)
            if xxt.login():
                MainWindow = QtWidgets.QMainWindow()
                ui = Ui_MainWindow()
                ui.setupUi(MainWindow, xxt)
                MainWindow.show()
            else:
                login_dialog = LoginDialog()
                login_dialog.show()
    else:
        login_dialog = LoginDialog()
        login_dialog.show()
        # if login_dialog is None:

        # MainWindow = QtWidgets.QMainWindow()
        # ui = Ui_MainWindow()
        # ui.setupUi(MainWindow)
        # MainWindow.show()
    sys.exit(app.exec())
